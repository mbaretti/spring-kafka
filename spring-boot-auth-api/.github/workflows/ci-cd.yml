name: 🚀 CI/CD Pipeline - Spring Boot Auth API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      run_security_scan:
        description: 'Run security vulnerability scan'
        required: false
        default: 'true'
        type: boolean

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

jobs:
  # ===============================
  # BUILD AND TEST JOB
  # ===============================
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
      # ===== CHECKOUT CODE =====
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching
      
      # ===== SETUP JAVA =====
      - name: ☕ Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: gradle
      
      # ===== GRADLE CACHE =====
      - name: 📦 Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # ===== VALIDATE GRADLE WRAPPER =====
      - name: 🔍 Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
      
      # ===== MAKE GRADLEW EXECUTABLE =====
      - name: 🛠️ Make Gradle Wrapper Executable
        run: chmod +x gradlew
      
      # ===== BUILD APPLICATION =====
      - name: 🔨 Build Application
        run: ./gradlew build --no-daemon --stacktrace
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
      
      # ===== RUN UNIT TESTS =====
      - name: 🧪 Run Unit Tests
        run: ./gradlew test --no-daemon --continue
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
      
      # ===== TEST BCRYPT FUNCTIONALITY =====
      - name: 🔐 Test BCrypt Password Encryption
        run: ./gradlew runBCryptDemo --no-daemon
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
      
      # ===== GENERATE TEST REPORTS =====
      - name: 📊 Generate Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 📋 Test Results (Java ${{ matrix.java-version }})
          path: build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: true
      
      # ===== UPLOAD TEST RESULTS =====
      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-java-${{ matrix.java-version }}
          path: |
            build/test-results/
            build/reports/tests/
          retention-days: 30
      
      # ===== UPLOAD BUILD ARTIFACTS =====
      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: success() && matrix.java-version == '17'
        with:
          name: spring-boot-auth-api-jar
          path: build/libs/*.jar
          retention-days: 30

  # ===============================
  # SECURITY SCAN JOB
  # ===============================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.run_security_scan == 'true'
    needs: build-and-test
    
    steps:
      # ===== CHECKOUT CODE =====
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
      
      # ===== SETUP JAVA =====
      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      # ===== GRADLE DEPENDENCY CHECK =====
      - name: 🔍 OWASP Dependency Check
        run: |
          chmod +x gradlew
          ./gradlew dependencyCheckAnalyze --no-daemon
        continue-on-error: true
      
      # ===== UPLOAD SECURITY REPORT =====
      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: build/reports/
          retention-days: 30
      
      # ===== RUN TRIVY SECURITY SCANNER =====
      - name: 🔒 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # ===== UPLOAD TRIVY RESULTS =====
      - name: 📤 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===============================
  # INTEGRATION TESTS JOB
  # ===============================
  integration-tests:
    name: 🔧 Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    services:
      # Test with PostgreSQL for integration testing
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      # ===== CHECKOUT CODE =====
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
      
      # ===== SETUP JAVA =====
      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      # ===== MAKE GRADLEW EXECUTABLE =====
      - name: 🛠️ Make Gradle Wrapper Executable
        run: chmod +x gradlew
      
      # ===== RUN APPLICATION FOR TESTING =====
      - name: 🚀 Start Application
        run: |
          ./gradlew bootRun --no-daemon &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for application to start
          timeout 60 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 2; done'
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
      
      # ===== TEST API ENDPOINTS =====
      - name: 🧪 Test API Endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:8080/actuator/health
          
          # Test user registration with BCrypt
          curl -X POST http://localhost:8080/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{
              "username": "testuser123",
              "email": "test@example.com",
              "password": "SecureTestPass123!",
              "confirmPassword": "SecureTestPass123!"
            }' \
            -w "\nHTTP Status: %{http_code}\n"
          
          # Test user login
          TOKEN=$(curl -X POST http://localhost:8080/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{
              "username": "testuser123",
              "password": "SecureTestPass123!"
            }' \
            -s | jq -r '.data.token')
          
          echo "JWT Token received: ${TOKEN:0:20}..."
          
          # Test protected endpoint
          curl -X GET http://localhost:8080/api/users/profile \
            -H "Authorization: Bearer $TOKEN" \
            -w "\nHTTP Status: %{http_code}\n"
      
      # ===== CLEANUP =====
      - name: 🧹 Cleanup
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  # ===============================
  # BUILD DOCKER IMAGE JOB
  # ===============================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      # ===== CHECKOUT CODE =====
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
      
      # ===== DOWNLOAD BUILD ARTIFACTS =====
      - name: 📥 Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-auth-api-jar
          path: build/libs/
      
      # ===== SETUP DOCKER BUILDX =====
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # ===== CREATE DOCKERFILE =====
      - name: 📝 Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM eclipse-temurin:17-jre-alpine
          
          # Create app user
          RUN addgroup -g 1001 -S appgroup && \
              adduser -u 1001 -S appuser -G appgroup
          
          # Set working directory
          WORKDIR /app
          
          # Copy JAR file
          COPY build/libs/*.jar app.jar
          
          # Change ownership
          RUN chown -R appuser:appgroup /app
          
          # Switch to non-root user
          USER appuser
          
          # Expose port
          EXPOSE 8080
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:8080/actuator/health || exit 1
          
          # Run application
          ENTRYPOINT ["java", "-jar", "/app/app.jar"]
          EOF
      
      # ===== BUILD DOCKER IMAGE =====
      - name: 🔨 Build Docker Image
        run: |
          docker build -t spring-boot-auth-api:latest .
          docker images spring-boot-auth-api:latest
      
      # ===== TEST DOCKER IMAGE =====
      - name: 🧪 Test Docker Image
        run: |
          # Run container
          docker run -d --name test-container -p 8080:8080 spring-boot-auth-api:latest
          
          # Wait for startup
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:8080/actuator/health
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  # ===============================
  # NOTIFICATION JOB
  # ===============================
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, integration-tests]
    if: always()
    
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 BCrypt Password Encryption" >> $GITHUB_STEP_SUMMARY
          echo "✅ Password encryption functionality tested and verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Features" >> $GITHUB_STEP_SUMMARY
          echo "- JWT Authentication: ✅ Tested" >> $GITHUB_STEP_SUMMARY
          echo "- Role-based Access Control: ✅ Verified" >> $GITHUB_STEP_SUMMARY
          echo "- Input Validation: ✅ Working" >> $GITHUB_STEP_SUMMARY
          echo "- OWASP Dependency Check: ✅ Completed" >> $GITHUB_STEP_SUMMARY